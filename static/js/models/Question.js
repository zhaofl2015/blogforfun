// Generated by CoffeeScript 1.9.3
(function() {
  var Question,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Question = (function(superClass) {
    extend(Question, superClass);

    Question.prototype.__random_code__ = '';

    Question.prototype.setRandomCode = function() {
      return this.__random_code__ = $tools.guid("xxxxxxxxxx_xxxxxxxxxx_xxxxxxxxxx");
    };

    Question.prototype.getRandomCode = function() {
      return this.__random_code__;
    };

    Question.include(attr_content_type);

    Question.include(attr_difficulty);

    Question.include(attr_paper);

    Question.include(attr_resource);

    Question.include(attr_roles);

    Question.include(attr_subject);

    Question.include(attr_point);

    Question.include(attr_analysis);

    Question.include(attr_workbook_content);

    Question.include(BigDady);

    function Question(obj) {
      var that;
      this.id = ko.observable((obj != null) && (obj.id != null) ? obj.id : '');
      this.nid = ko.observable((obj != null) && (obj.nid != null) ? obj.nid : 0);
      this.seconds = ko.observable((obj != null) && (obj.seconds != null) ? obj.seconds : 0);
      this.content = ko.observable((obj != null) && (obj.content != null) ? obj.content : '');
      this.content_editor_code = $tools.guid("content_xxxxxxxxxxxxxxxxxxxxxxxxxx");
      this.options = ko.observableArray((obj != null) && (obj.options != null) ? obj.options : []);
      this.answers = ko.observableArray((obj != null) && (obj.answers != null) ? obj.answers : []);
      this._answer_list = ko.observableArray([]);
      this.hide_option_number = ko.observable((obj != null) && (obj.hide_option_number != null) ? obj.hide_option_number : false);
      this.template_name = ko.observable((obj != null) && (obj.template_name != null) ? obj.template_name : '');
      this.review_template_name = ko.observable((obj != null) && (obj.review_template_name != null) ? obj.review_template_name : '');
      this.description = ko.observable((obj != null) && (obj.description != null) ? obj.description : '');
      this.sub_index = ko.observable((obj != null) && (obj.sub_index != null) ? obj.sub_index : '');
      this.question_type = ko.observable((obj != null) && (obj.question_type != null) ? obj.question_type : 0);
      this.submit_disable = ko.observable(false);
      this.__images_uploading = [];
      that = this;
      $("body").on("beforeInsertImage_tk", function() {
        that.__images_uploading.push(true);
        if (that.__images_uploading.length > 0) {
          that.submit_disable(true);
        }
        return true;
      });
      $("body").on("afterInsertImage_tk", function() {
        that.__images_uploading.pop();
        if (that.__images_uploading.length === 0) {
          that.submit_disable(false);
        }
        return true;
      });
      this.content.subscribe(function(newValue) {
        that.content($tools.replaceAll(newValue, "data-bind", ""));
      });
      this.analysis.subscribe(function(newValue) {
        that.analysis($tools.replaceAll(newValue, "data-bind", ""));
      });
    }

    Question.prototype._reset_options_id = function(self) {
      ko.utils.arrayForEach(this.options(), function(option, index) {
        var editor, opt_id;
        switch (self.content_type_id()) {
          case 1:
          case 2:
          case 3:
          case 5:
          case 11:
            opt_id = String.fromCharCode(index + 65);
            break;
          case 7:
          case 8:
          case 9:
            opt_id = index;
            break;
          default:
            opt_id = String.fromCharCode(index + 65);
        }
        option.id(opt_id);
        if (self.content_type_id() !== 11) {
          editor = UE.getEditor(option._editor_code);
          $(editor.window.document.body).attr('data-bind', 'editorinput:options()[' + index + '].content');
          ko.cleanNode(editor.window.document.body);
          ko.applyBindings(self, editor.window.document.body);
        }
      });
    };

    Question.prototype.add_option = function(display_number, disable_editor) {
      var option;
      option = new Option({
        id: display_number === 1 ? this.options().length : String.fromCharCode(this.options().length + 65),
        content: ''
      });
      this.options.push(option);
      TreeDialogMod.bindInput($('.answer_nlgs .treeDialog'));
      if ((disable_editor != null) && (disable_editor === 11 || disable_editor === 12 || disable_editor === 13)) {
        return;
      }
      $tools.initEditor(option._editor_code, this, "options()[" + (this.options().length - 1) + "].content");
    };

    Question.prototype.delete_option = function(self) {
      var ref, that;
      that = this;
      if ((ref = self.content_type_id()) === 1 || ref === 2 || ref === 3 || ref === 5 || ref === 11) {
        ko.utils.arrayForEach(self.answers(), function(answer) {
          if (answer.id() === that.id()) {
            self.answers.remove(answer);
          }
        });
        self._answer_list([]);
        ko.utils.arrayForEach(self.answers(), function(answer) {
          return self._answer_list.push(answer.id());
        });
      }
      self.options.remove(that);
      self._reset_options_id(self);
    };

    Question.prototype.add_answer = function() {
      this.answers.push(new Answer({
        id: this.answers().length
      }));
      TreeDialogMod.bindInput($('.treeDialog'));
    };

    Question.prototype.delete_answer = function(self) {
      self.answers.remove(this);
      ko.utils.arrayForEach(self.answers(), function(answer, index) {
        answer.id(index);
      });
    };

    Question.prototype.submit = function(question, refresh) {
      var confirm, submit_data, that, validPass, workbooks;
      that = this;
      if (that.papers().length === 0 && this.subject_id() !== 102) {
        confirm = window.confirm('所属试卷未选择，继续提交吗？');
        if (!confirm) {
          return;
        }
      }
      validPass = that.Recycling(question);
      if (validPass === false) {
        return false;
      }
      that.submit_disable(true);
      submit_data = that.Recycling(question);
      workbooks = that.getWorkbookData();
      if (submit_data) {
        $tools.ajax({
          url: '/xx/questions/edit',
          data: {
            content: JSON.stringify(submit_data),
            workbooks: JSON.stringify(workbooks)
          },
          success: function(data) {
            $tools.msgTip('操作成功', 'success');
            return setTimeout(function() {
              if (refresh) {
                return history.go(0);
              } else {
                return window.close();
              }
            }, 1000);
          },
          complete: function() {
            return setTimeout(function() {
              return that.submit_disable(false);
            }, 1000);
          }
        });
      } else {
        that.submit_disable(false);
      }
      return false;
    };

    Question.prototype.refreshPreview = function(question) {
      window.question = this.Recycling(question);
      if (window.question) {
        return $('#previewiframe')[0].contentWindow.location.reload();
      }
    };

    Question.prototype.pcPreview = function(id) {
      var json, param, q, q_clone;
      if (id) {
        return window.open('/xx/questions/preview-pc-wrap?question_id=' + id + '&subject_id=' + this.subject_id());
      } else {
        q = this.Recycling(question);
        q_clone = {};
        q_clone = $.extend(q_clone, q);
        delete q_clone.content_type_choices;
        json = JSON.stringify(q_clone);
        param = encodeURIComponent(json);
        return window.open('/xx/questions/preview-pc-wrap?questiondata=' + param + '&subject_id=' + this.subject_id());
      }
    };

    Question.prototype.mobilePreview = function() {
      var iframe;
      iframe = $('#previewiframe');
      return iframe.attr('src', iframe.data('src'));
    };

    Question.prototype.checkDuplicate = function(resource_type) {
      var complex, file_id, loading, text, that;
      that = this;
      if (that.text) {
        if (that.text() || that.resource().id()) {
          loading = $.popbox({
            width: 360,
            title: '系统提示',
            showBtn: false,
            showCloseBtn: false,
            content: '<div class="text-center"><img src="/static/img/loading.gif" class="mr_20" alt="请稍等..."><span>正在检测重题目相似性</span></div>'
          });
          file_id = resource_type === '1' ? this.resource().id() : '';
          text = resource_type === '2' ? this.text() : '';
          return $.ajax({
            url: '/xx/questions/duplicate-resource',
            type: 'POST',
            data: {
              text: text,
              subject_id: this.subject_id(),
              file_id: file_id,
              resource_type_id: this.resource_type_id(),
              resource_id: this.id()
            },
            success: function(data) {
              var formstr, i, id, index, len, ref;
              loading.close();
              if (data.success) {
                if (data.resource_ids.length > 0) {
                  formstr = '<form id="duplicateForm" target="_blank" method="POST" action="/xx/questions/duplicate-list">';
                  formstr += '<input type="hidden" name="subject_id" value="' + that.subject_id() + '">';
                  ref = data.resource_ids;
                  for (index = i = 0, len = ref.length; i < len; index = ++i) {
                    id = ref[index];
                    formstr += '<input type="hidden" name="resource_ids[]" value="' + id + '">';
                  }
                  formstr += '</form>';
                  return $.popbox({
                    width: 360,
                    title: '系统提示',
                    content: '<div class="text-center"><i class="glyphicon glyphicon-ok-circle icon-right text-success"></i><span>检测到有相似题目，立即去查看？</span></div>' + formstr,
                    onOk: function() {
                      return $('#duplicateForm').submit();
                    }
                  });
                } else {
                  return $.popbox({
                    width: 360,
                    title: '系统提示',
                    content: '<div class="text-center"><i class="glyphicon glyphicon-remove-circle icon-wrong text-danger"></i><span>未检测到相似题目</span></div>'
                  });
                }
              } else {
                return $.popbox({
                  width: 360,
                  title: '系统提示',
                  content: '<div class="text-center"><i class="glyphicon glyphicon-remove-circle icon-wrong text-danger"></i><span>未检测到相似题目</span></div>'
                });
              }
            },
            error: function() {
              loading.close();
              return $tools.msgTip('请求失败请重试！');
            }
          });
        }
      } else {
        if (this.content()) {
          loading = $.popbox({
            width: 360,
            title: '系统提示',
            showBtn: false,
            showCloseBtn: false,
            content: '<div class="text-center"><img src="/static/img/loading.gif" class="mr_20" alt="请稍等..."><span>正在检测重题目相似性</span></div>'
          });
          complex = this.content_type_id() === 0 ? 1 : 0;
          return $.ajax({
            url: '/xx/questions/duplicate',
            type: 'POST',
            data: {
              content: this.content(),
              subject_id: this.subject_id(),
              complex: complex,
              question_id: this.id()
            },
            success: function(data) {
              var formstr, i, id, index, len, ref;
              loading.close();
              if (data.success) {
                if (data.question_ids.length > 0) {
                  formstr = '<form id="duplicateForm" target="_blank" method="POST" action="/xx/questions/duplicate-list">';
                  formstr += '<input type="hidden" name="subject_id" value="' + that.subject_id() + '">';
                  ref = data.question_ids;
                  for (index = i = 0, len = ref.length; i < len; index = ++i) {
                    id = ref[index];
                    formstr += '<input type="hidden" name="question_ids[]" value="' + id + '">';
                  }
                  formstr += '</form>';
                  return $.popbox({
                    width: 360,
                    title: '系统提示',
                    content: '<div class="text-center"><i class="glyphicon glyphicon-ok-circle icon-right text-success"></i><span>检测到有相似题目，立即去查看？</span></div>' + formstr,
                    onOk: function() {
                      return $('#duplicateForm').submit();
                    }
                  });
                } else {
                  return $.popbox({
                    width: 360,
                    title: '系统提示',
                    content: '<div class="text-center"><i class="glyphicon glyphicon-remove-circle icon-wrong text-danger"></i><span>未检测到相似题目</span></div>'
                  });
                }
              } else {
                return $.popbox({
                  width: 360,
                  title: '系统提示',
                  content: '<div class="text-center"><i class="glyphicon glyphicon-remove-circle icon-wrong text-danger"></i><span>未检测到相似题目</span></div>'
                });
              }
            },
            error: function() {
              loading.close();
              return $tools.msgTip('请求失败请重试！');
            }
          });
        }
      }
    };

    return Question;

  })(SuperClass);

  this.Question = Question;

}).call(this);

//# sourceMappingURL=Question.js.map
