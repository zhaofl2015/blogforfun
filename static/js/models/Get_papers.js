// Generated by CoffeeScript 1.9.3
(function() {
  var Get_papers;

  Get_papers = (function() {
    function Get_papers() {}

    Get_papers.prototype.choose_ownerpaper_array = ko.observableArray([]);

    Get_papers.prototype.choose_ownerpaper_value = ko.observable('');

    Get_papers.prototype.choose_ownerpaper_id = ko.observable('');

    Get_papers.prototype.update_choose_papers = function() {
      var that;
      that = this;
      if (this.updateTimer) {
        clearTimeout(this.updateTimer);
        this.updateTimer = null;
      }
      if (this.updateAjax) {
        this.updateAjax.abort();
        this.updateAjax = null;
      }
      this.updateTimer = setTimeout(function() {
        that.updateAjax = $.post("/xx/questions/paper_hints", {
          title: that.choose_ownerpaper_value(),
          subject_id: that.subject_id()
        }, function(data) {
          var i, pid;
          if (data.success) {
            that.choose_ownerpaper_array.removeAll();
            for (i in data.hints) {
              if (data.hints.hasOwnProperty(i)) {
                that.choose_ownerpaper_array.push({
                  paperid: i,
                  papername: data.hints[i]
                });
              }
            }
            pid = that._get_paper_id();
            that.choose_ownerpaper_id = pid ? ko.observable(pid) : ko.observable('');
          }
        });
      });
    };

    Get_papers.prototype._get_paper_id = function() {
      var target_paper_id, that;
      that = this;
      target_paper_id = false;
      ko.utils.arrayForEach(this.choose_ownerpaper_array(), function(el) {
        if (el.papername === that.choose_ownerpaper_value()) {
          target_paper_id = el.paperid;
        }
      });
      return target_paper_id;
    };

    return Get_papers;

  })();

  this.Get_papers = Get_papers;

}).call(this);

//# sourceMappingURL=Get_papers.js.map
