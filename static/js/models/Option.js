// Generated by CoffeeScript 1.9.3
(function() {
  var Option;

  Option = (function() {
    function Option(obj) {
      var that;
      this.id = ko.observable((obj != null) && (obj.id != null) ? obj.id : '');
      this.content = ko.observable((obj != null) && (obj.content != null) ? obj.content : '');
      this.score = ko.observable((obj != null) && (obj.score != null) ? obj.score : 1);
      this.tips = ko.observableArray((obj != null) && (obj.tips != null) ? obj.tips : []);
      this.points = ko.observableArray((obj != null) && (obj.points != null) ? obj.points : []);
      this.position_col = ko.observable((obj != null) && (obj.position_col != null) ? obj.position_col : '');
      this.position_index = ko.observable((obj != null) && (obj.position_index != null) ? obj.position_index : '');
      this.voice_texts = ko.observableArray([]);
      if ((obj != null) && (obj.voice_texts != null)) {
        that = this;
        ko.utils.arrayForEach(obj.voice_texts, function(voice_text) {
          that.voice_texts.push(new Voice(voice_text));
        });
      }
      if (this.voice_texts().length === 0) {
        this.voice_texts.push(new Voice(''));
      }
      this._editor_code = $tools.guid("option_xxxxxxxxxxxxxxxxxxxxxxxxxx");
      this._search_point_id = ko.observable('');
      this._search_point_content = ko.observable('');
      this._search_point_type = ko.observable(false);
      that = this;
      this.position = ko.dependentObservable({
        read: function() {
          return that.position_col() + "-" + that.position_index();
        },
        write: function(value) {
          var arr;
          arr = value.split('-');
          that.position_col(arr[0]);
          return that.position_index(arr[1]);
        },
        owner: that
      });
      this.score.subscribe(function() {
        $("body").trigger("answers_update");
      });
      this.points.subscribe(function() {
        $("body").trigger("answers_update");
      });
    }

    Option.prototype.add_option_point = function(obj, event) {
      var i, input, is_in_array, len, p, point, ref;
      input = $(event.target).closest('.form-group').find('.treeDialog');
      point = TreeDialogMod.getTagsOf(input)[0];
      if (point != null) {
        TreeDialogMod.clearTags();
        this._search_point_id(point.id);
        this._search_point_content(point.text);
        is_in_array = false;
        ref = this.points();
        for (i = 0, len = ref.length; i < len; i++) {
          p = ref[i];
          if (p.id() + '' === point.id + '') {
            is_in_array = true;
          }
        }
        if (!is_in_array) {
          this.points.push(new Point({
            id: this._search_point_id(),
            content: this._search_point_content(),
            isKeyPoint: this._search_point_type()
          }));
        }
        this._search_point_id('');
        this._search_point_content('');
        this._search_point_type(false);
      }
    };

    return Option;

  })();

  this.Option = Option;

}).call(this);

//# sourceMappingURL=Option.js.map
