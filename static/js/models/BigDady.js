// Generated by CoffeeScript 1.9.3
(function() {
  var BigDady, back, func;

  BigDady = (function() {
    function BigDady() {}

    BigDady.prototype.SubComplexDisposal = function(gd, type) {
      var option_id, params, parseContent, ref, ref1, ref2, that;
      console.info(gd);
      that = this;
      params = UrlUtils.getUrlParams(location.href);
      this.id(params.question_id);
      this.sub_index(gd.sub_index === -1 ? '' : gd.sub_index);
      this.template_name("ko-type-" + type);
      this.review_template_name("ko-review-" + type);
      this.seconds(gd.seconds || 0);
      if (ko.isObservable(this.answer_is_radio)) {
        this.answer_is_radio(ko.observable(type === 1 || type === 5));
      } else {
        this.answer_is_radio = ko.observable(type === 1 || type === 5);
      }
      this.content_type_id(type);
      this.content_type_name("复合题");
      this.second_content_type_id(gd.content_type_id);
      this.second_content_type_name(gd.content_type);
      this.third_content_type_id(gd.content_type_2_id);
      this.third_content_type_name(gd.content_type_2);
      if (gd.question_type != null) {
        this.question_type(gd.question_type);
      }
      this.sub_content_type_list = ko.observable(gd.sub_content_type_choices);
      if (ko.isObservable(this.sub_content_type_id)) {
        this.sub_content_type_id(type);
      } else {
        this.sub_content_type_id = ko.observable(type);
      }
      if (ko.isObservable(this.sub_content_type_name)) {
        this.sub_content_type_name('');
      } else {
        this.sub_content_type_name = ko.observable('');
      }
      ko.utils.arrayForEach(this.sub_content_type_list(), function(content_type) {
        if (content_type[0] === type) {
          that.sub_content_type_name(content_type[1]);
        }
      });
      if (ko.isObservable(that.different)) {
        that.different(((ref = gd.analysis_types) != null ? ref.length : void 0) > 0);
      } else {
        that.different = ko.observable(((ref1 = gd.analysis_types) != null ? ref1.length : void 0) > 0);
      }
      if (that.different()) {
        that.__analysis_types = gd.analysis_types;
        if (ko.isObservable(that.__analysis_type_ids)) {
          that.__analysis_type_ids(gd.analysis_type_ids);
        } else {
          that.__analysis_type_ids = ko.observableArray(gd.analysis_type_ids);
        }
        if (ko.isObservable(that.keychain)) {
          that.keychain([]);
        } else {
          that.keychain = ko.observableArray([]);
        }
        if (((ref2 = gd.analysis_list) != null ? ref2.length : void 0) > 0) {
          ko.utils.arrayForEach(gd.analysis_list, function(analysis) {
            var choice, multi, temp_ana_type;
            temp_ana_type = 1;
            multi = 1;
            ko.utils.arrayForEach(that.__analysis_types, function(node) {
              if (node._id === analysis.analysis_type_id) {
                temp_ana_type = node.content_type;
              }
              if (node.id === analysis.analysis_type_id) {
                multi = node.multi;
              }
            });
            choice = [];
            ko.utils.arrayForEach(analysis.choice_ids, function(c, index) {
              choice.push({
                id: ko.observable(c),
                text: ko.observable(analysis.choice_contents[index])
              });
            });
            that.keychain.push({
              key: analysis.analysis_type_id,
              name: analysis.analysis_type,
              multi: multi,
              type: temp_ana_type,
              choice: ko.observableArray(choice),
              content: ko.observable(analysis.text)
            });
          });
        } else {
          ko.utils.arrayForEach(that.__analysis_types, function(analysis) {
            if (that.__analysis_type_ids.indexOf(analysis._id) !== -1) {
              that.keychain.push({
                key: analysis._id,
                name: analysis.name,
                multi: analysis.multi,
                type: analysis.content_type,
                choice: ko.observableArray([]),
                content: ko.observable('')
              });
            }
          });
        }
      }
      this.content(gd.content);
      this.analysis(gd.analysis);
      this.hide_option_number(gd.hide_option_number === 1);
      this._answer_list.onecSubscribe(function() {
        that.answers([]);
        ko.utils.arrayForEach(that.options(), function(option) {
          if ($.inArray(option.id(), that._answer_list()) !== -1) {
            that.answers.push(new Answer({
              id: option.id(),
              content: option.content()
            }));
          }
        });
        $("body").trigger("answers_update");
      });
      $("body").off("answers_update").on("answers_update", function() {
        ko.utils.arrayForEach(that.options(), function(option) {
          return ko.utils.arrayForEach(that.answers(), function(answer) {
            switch (type) {
              case 1:
              case 2:
              case 3:
              case 5:
                if (answer.id() === option.id()) {
                  answer.points.removeAll();
                  ko.utils.arrayForEach(option.points(), function(point) {
                    answer.points.push(new Point({
                      id: point.id(),
                      content: point.content(),
                      isKeyPoint: point.isKeyPoint(),
                      tagId: point.tagId(),
                      tagName: point.tagName()
                    }));
                  });
                  answer.score(option.score());
                }
            }
          });
        });
      });
      this.content.onecSubscribe(function(newValue) {
        console.info(newValue);
        newValue = $tools.replaceAll(newValue, "data-bind", "");
        console.info(newValue);
        return that.content(newValue);
      });
      this.sub_content_type_id.onecSubscribe(function(newType) {
        console.info("newType - " + newType);
        that.content('');
        that.content_editor_code = $tools.guid("content_xxxxxxxxxxxxxxxxxxxxxxxxxx");
        gd.content = '';
        that.options.removeAll();
        gd.options = [];
        that.answers.removeAll();
        gd.answers = [];
        gd.knowledge_points_b_list = [];
        gd.knowledge_points_list = [];
        that._answer_list = newType === 1 || newType === 5 ? ko.observable('') : ko.observableArray([]);
        that.analysis('');
        gd.analysis = '';
        that.analysis_editor_code = $tools.guid("analysis_xxxxxxxxxxxxxxxxxxxxxxxxxx");
        that.SubComplexDisposal(gd, newType);
        setDashboard(that);
      });
      $("body").off("update_model").on("update_model", function(event, content, key) {
        if (/^CO/.test(key)) {
          that.content(content);
        }
        if (/^AN/.test(key)) {
          that.analysis(content);
        }
      });
      switch (type) {
        case 1:
          ko.utils.arrayForEach(gd.options, function(options_content, index) {
            that.options.push(new Option({
              id: String.fromCharCode(+index + 65),
              content: options_content.option
            }));
          });
          ko.utils.arrayForEach(gd.answers, function(dkanswer) {
            var answer;
            answer = new Answer({
              id: String.fromCharCode(+dkanswer.answer + 65),
              content: dkanswer.name,
              score: dkanswer.score_percentage
            });
            ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
              answer.points.push(new Point({
                id: knowledge.id,
                content: knowledge.name,
                isKeyPoint: knowledge.main === 1,
                tagId: knowledge.tag_id,
                tagName: knowledge.tag_name
              }));
              that.options()[+dkanswer.answer].points.push(new Point({
                id: knowledge.id,
                content: knowledge.name,
                isKeyPoint: knowledge.main === 1,
                tagId: knowledge.tag_id,
                tagName: knowledge.tag_name
              }));
            });
            that.answers.push(answer);
            that._answer_list(String.fromCharCode(+dkanswer.answer + 65));
          });
          break;
        case 2:
          ko.utils.arrayForEach(gd.options, function(options_content, index) {
            that.options.push(new Option({
              id: String.fromCharCode(+index + 65),
              content: options_content.option
            }));
          });
          ko.utils.arrayForEach(gd.answers, function(dkanswer) {
            var answer;
            answer = new Answer({
              id: String.fromCharCode(+dkanswer.answer + 65),
              content: dkanswer.name,
              score: dkanswer.score_percentage
            });
            ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
              answer.points.push(new Point({
                id: knowledge.id,
                content: knowledge.name,
                isKeyPoint: knowledge.main === 1,
                tagId: knowledge.tag_id,
                tagName: knowledge.tag_name
              }));
              that.options()[+dkanswer.answer].points.push(new Point({
                id: knowledge.id,
                content: knowledge.name,
                isKeyPoint: knowledge.main === 1,
                tagId: knowledge.tag_id,
                tagName: knowledge.tag_name
              }));
            });
            that.answers.push(answer);
            that._answer_list.push(String.fromCharCode(+dkanswer.answer + 65));
          });
          break;
        case 3:
          ko.utils.arrayForEach(gd.options, function(options_content, index) {
            that.options.push(new Option({
              id: String.fromCharCode(+index + 65),
              content: options_content.option
            }));
          });
          ko.utils.arrayForEach(gd.answers, function(dkanswer) {
            var answer;
            answer = new Answer({
              id: String.fromCharCode(+dkanswer.answer + 65),
              content: dkanswer.name,
              score: dkanswer.score_percentage
            });
            ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
              answer.points.push(new Point({
                id: knowledge.id,
                content: knowledge.name,
                isKeyPoint: knowledge.main === 1,
                tagId: knowledge.tag_id,
                tagName: knowledge.tag_name
              }));
              that.options()[+dkanswer.answer].points.push(new Point({
                id: knowledge.id,
                content: knowledge.name,
                isKeyPoint: knowledge.main === 1,
                tagId: knowledge.tag_id,
                tagName: knowledge.tag_name
              }));
            });
            that.answers.push(answer);
            that._answer_list.push(String.fromCharCode(+dkanswer.answer + 65));
          });
          break;
        case 4:
          parseContent = function() {
            return setTimeout(function() {
              var content, count, newCont, preview;
              count = 0;
              preview = $('.content_preview');
              content = preview.html();
              newCont = content.replace(/__\$\$__/g, function() {
                return '<span style="padding:0 20px;border-bottom:1px solid #000;white-space: nowrap;">空' + (++count) + '</span>';
              });
              preview.html(newCont);
              return preview.find('img[latex]').each(function(index, element) {
                var latex, newLatex;
                latex = $(element).attr('latex');
                newLatex = latex.replace(/\\fbox {}/g, function() {
                  return '\\fbox {空' + (++count) + '}';
                });
                return $.ajax({
                  url: 'https://tiku.17zuoye.net/latex/render?r=p&ds=140&m=y&s=' + encodeURIComponent(newLatex),
                  dataType: "jsonp",
                  jsonp: "cb",
                  success: function(data) {
                    return $(element).attr('src', data.url);
                  }
                });
              });
            }, 100);
          };
          this.content.onecBeforeSubscribe(function(newValue, oldValue) {
            var answer, i, j, newBlockCount, newCount, oldBlockCount, oldCount, ref3;
            parseContent();
            oldBlockCount = oldValue.split("\\fbox {}").length - 1;
            newBlockCount = newValue.split("\\fbox {}").length - 1;
            oldCount = oldValue.split("__$$__").length - 1 + oldBlockCount;
            newCount = newValue.split("__$$__").length - 1 + newBlockCount;
            if (newCount !== oldCount) {
              that.answers.removeAll();
              for (i = j = 0, ref3 = newCount; 0 <= ref3 ? j < ref3 : j > ref3; i = 0 <= ref3 ? ++j : --j) {
                answer = new Answer({
                  id: i
                });
                that.answers.push(answer);
                $tools.initEditor(answer._editor_code, that, "answers()[" + i + "].content");
              }
              TreeDialogMod.bindInput($('.answer_nlgs .treeDialog'));
            }
          });
          ko.utils.arrayForEach(gd.answers, function(dkanswer) {
            var answer;
            answer = new Answer({
              content: dkanswer.answer,
              score: dkanswer.score_percentage,
              editor_type: dkanswer.rich_text
            });
            ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
              answer.points.push(new Point({
                id: knowledge.id,
                content: knowledge.name,
                isKeyPoint: knowledge.main === 1,
                tagId: knowledge.tag_id,
                tagName: knowledge.tag_name
              }));
            });
            that.answers.push(answer);
          });
          parseContent();
          break;
        case 5:
          if (gd.options.length === 0) {
            that.options.push(new Option({
              id: 'A',
              content: '<img src="' + right_img + '" />'
            }));
            that.options.push(new Option({
              id: 'B',
              content: '<img src="' + wrong_img + '" />'
            }));
          } else {
            ko.utils.arrayForEach(gd.options, function(options_content, index) {
              that.options.push(new Option({
                id: String.fromCharCode(+index + 65),
                content: options_content.option
              }));
            });
          }
          ko.utils.arrayForEach(gd.answers, function(dkanswer) {
            var answer;
            answer = new Answer({
              id: String.fromCharCode(+dkanswer.answer + 65),
              content: that.options()[+dkanswer.answer] ? that.options()[+dkanswer.answer].content() : '',
              score: dkanswer.score_percentage
            });
            that.options()[+dkanswer.answer].score(dkanswer.score_percentage);
            ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
              answer.points.push(new Point({
                id: knowledge.id,
                content: knowledge.name,
                isKeyPoint: knowledge.main === 1,
                tagId: knowledge.tag_id,
                tagName: knowledge.tag_name
              }));
              that.options()[+dkanswer.answer].points.push(new Point({
                id: knowledge.id,
                content: knowledge.name,
                isKeyPoint: knowledge.main === 1,
                tagId: knowledge.tag_id,
                tagName: knowledge.tag_name
              }));
            });
            that.answers.push(answer);
            return that._answer_list(String.fromCharCode(+dkanswer.answer + 65));
          });
          break;
        case 6:
          if (gd.answers.length === 0) {
            this.answers.push(new Answer({
              id: 0
            }));
          } else {
            ko.utils.arrayForEach(gd.answers, function(dkanswer, index) {
              var answer;
              answer = new Answer({
                id: index,
                content: dkanswer.answer,
                score: dkanswer.score_percentage,
                editor_type: dkanswer.rich_text
              });
              ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
                answer.points.push(new Point({
                  id: knowledge.id,
                  content: knowledge.name,
                  isKeyPoint: knowledge.main === 1,
                  tagId: knowledge.tag_id,
                  tagName: knowledge.tag_name
                }));
              });
              that.answers.push(answer);
            });
          }
          TreeDialogMod.bindInput($('.treeDialog'));
          break;
        case 7:
          option_id = 0;
          ko.utils.arrayForEach((gd.options.length > 0 ? gd.options : []), function(option, index) {
            var i, j, len, o, option_obj, ref3;
            ref3 = option.option;
            for (i = j = 0, len = ref3.length; j < len; i = ++j) {
              o = ref3[i];
              option_obj = {
                id: option_id++,
                content: o,
                position_col: index + 1,
                position_index: i + 1
              };
              that.options.push(new Option(option_obj));
            }
          });
          ko.utils.arrayForEach(gd.answers, function(dkanswer, index) {
            var answer;
            answer = new Answer({
              id: index,
              content: dkanswer.answer,
              score: dkanswer.score_percentage,
              editor_type: dkanswer.rich_text
            });
            ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
              answer.points.push(new Point({
                id: knowledge.id,
                content: knowledge.name,
                isKeyPoint: knowledge.main === 1,
                tagId: knowledge.tag_id,
                tagName: knowledge.tag_name
              }));
            });
            that.answers.push(answer);
          });
          break;
        case 8:
          ko.utils.arrayForEach((gd.options.length > 0 ? gd.options : []), function(option_content, index) {
            that.options.push(new Option({
              id: index,
              content: option_content.option
            }));
          });
          if (gd.answers.length === 0) {
            this.answers.push(new Answer({
              id: 0
            }));
          } else {
            ko.utils.arrayForEach(gd.answers, function(dkanswer, index) {
              var answer;
              answer = new Answer({
                id: index,
                content: dkanswer.answer,
                score: dkanswer.score_percentage,
                classify_name: dkanswer.classification
              });
              ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
                answer.points.push(new Point({
                  id: knowledge.id,
                  content: knowledge.name,
                  isKeyPoint: knowledge.main === 1,
                  tagId: knowledge.tag_id,
                  tagName: knowledge.tag_name
                }));
              });
              return that.answers.push(answer);
            });
            return;
          }
          break;
        case 9:
          ko.utils.arrayForEach((gd.options.length > 0 ? gd.options : []), function(option_content, index) {
            that.options.push(new Option({
              id: index,
              content: option_content.option
            }));
          });
          if (gd.answers.length === 0) {
            this.answers.push(new Answer({
              id: 0
            }));
          } else {
            ko.utils.arrayForEach(gd.answers, function(dkanswer, index) {
              var answer;
              answer = new Answer({
                id: index,
                content: dkanswer.answer,
                score: dkanswer.score_percentage
              });
              ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
                answer.points.push(new Point({
                  id: knowledge.id,
                  content: knowledge.name,
                  isKeyPoint: knowledge.main === 1,
                  tagId: knowledge.tag_id,
                  tagName: knowledge.tag_name
                }));
              });
              that.answers.push(answer);
            });
          }
          break;
        case 10:
          that = this;
          ko.utils.arrayForEach(gd.options, function(options_content, index) {
            that.options.push(new Option({
              id: String.fromCharCode(+index + 65),
              content: options_content.option
            }));
          });
          this.content.beforeSubscribe(function(newValue, oldValue) {
            var answer, i, j, newBlockCount, newCount, oldBlockCount, oldCount, ref3;
            oldBlockCount = oldValue.split("\\fbox {}").length - 1;
            newBlockCount = newValue.split("\\fbox {}").length - 1;
            oldCount = oldValue.split("__$$__").length - 1 + oldBlockCount;
            newCount = newValue.split("__$$__").length - 1 + newBlockCount;
            if (newCount !== oldCount) {
              that.answers.removeAll();
              for (i = j = 0, ref3 = newCount; 0 <= ref3 ? j < ref3 : j > ref3; i = 0 <= ref3 ? ++j : --j) {
                answer = new Answer({
                  id: i
                });
                that.answers.push(answer);
              }
              TreeDialogMod.bindInput($('.answer_nlgs .treeDialog'));
            }
          });
          ko.utils.arrayForEach(gd.answers, function(dkanswer) {
            var answer;
            answer = new Answer({
              content: String.fromCharCode(+dkanswer.answer + 65),
              score: dkanswer.score_percentage
            });
            ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
              answer.points.push(new Point({
                id: knowledge.id,
                content: knowledge.name,
                isKeyPoint: knowledge.main === 1,
                tagId: knowledge.tag_id,
                tagName: knowledge.tag_name
              }));
            });
            return that.answers.push(answer);
          });
          return;
      }
    };

    BigDady.prototype.SubComplexRecycling = function(gd) {
      var invalidArray, that;
      console.info(gd);
      that = this;
      gd.content_type_id = +this.second_content_type_id();
      gd.content_type = this.second_content_type_name();
      gd.content_type_2_id = +this.third_content_type_id();
      gd.content_type_2 = this.third_content_type_name();
      gd.sub_content_type = this.sub_content_type_name();
      gd.sub_content_type_id = this.sub_content_type_id();
      gd.hide_option_number = this.hide_option_number() ? 1 : 0;
      if (gd.question_type != null) {
        gd.question_type = this.question_type();
      }
      gd.seconds = +this.seconds();
      gd.content = this.content();
      gd.analysis = this.analysis();
      gd.options = [];
      gd.answers = [];
      ko.utils.arrayForEach(this.options(), function(option, index) {
        var pos, pos_col, pos_index;
        if (option.position() !== '-') {
          pos = option.position().split('-');
          pos_col = pos[0] - 1;
          pos_index = pos[1] - 1;
          if (gd.options[pos_col] == null) {
            gd.options[pos_col] = {};
            gd.options[pos_col].option = [];
          }
          gd.options[pos_col].option[pos_index] = option.content();
        } else {
          gd.options.push({
            option: option.content()
          });
        }
        if (that.answers()[0] != null) {
          if (that.answers()[0].id() === String.fromCharCode(+index + 65)) {
            gd.answers.push(index + '');
          }
        }
      });
      switch (this.sub_content_type_id()) {
        case 1:
        case 2:
        case 3:
        case 5:
          gd.answers = [];
          ko.utils.arrayForEach(this.answers(), function(answer) {
            var dkanswer;
            dkanswer = {
              answer: answer.id().charCodeAt() - 65,
              score_percentage: answer.score(),
              knowledge_points: []
            };
            ko.utils.arrayForEach(answer.points(), function(point) {
              return dkanswer.knowledge_points.push({
                id: point.id(),
                name: point.content(),
                main: point.isKeyPoint() ? 1 : 0,
                tag_id: point.tagId(),
                tag_name: point.tagName()
              });
            });
            gd.answers.push(dkanswer);
          });
          break;
        case 4:
          gd.answers = [];
          ko.utils.arrayForEach(this.answers(), function(answer) {
            var dkanswer;
            dkanswer = {
              answer: answer.content(),
              rich_text: answer.editor_type(),
              score_percentage: answer.score(),
              knowledge_points: []
            };
            ko.utils.arrayForEach(answer.points(), function(point) {
              return dkanswer.knowledge_points.push({
                id: point.id(),
                name: point.content(),
                main: point.isKeyPoint() ? 1 : 0,
                tag_id: point.tagId(),
                tag_name: point.tagName()
              });
            });
            gd.answers.push(dkanswer);
          });
          break;
        case 6:
        case 7:
        case 9:
          gd.answers = [];
          ko.utils.arrayForEach(this.answers(), function(answer) {
            var dkanswer;
            dkanswer = {
              answer: answer.content(),
              score_percentage: answer.score(),
              knowledge_points: []
            };
            ko.utils.arrayForEach(answer.points(), function(point) {
              return dkanswer.knowledge_points.push({
                id: point.id(),
                name: point.content(),
                main: point.isKeyPoint() ? 1 : 0,
                tag_id: point.tagId(),
                tag_name: point.tagName()
              });
            });
            gd.answers.push(dkanswer);
          });
          break;
        case 8:
          gd.answers = [];
          ko.utils.arrayForEach(this.answers(), function(answer) {
            var dkanswer;
            dkanswer = {
              answer: answer.content().replace(/，/g, ','),
              score_percentage: answer.score(),
              classification: answer.classify_name(),
              knowledge_points: []
            };
            ko.utils.arrayForEach(answer.points(), function(point) {
              return dkanswer.knowledge_points.push({
                id: point.id(),
                name: point.content(),
                main: point.isKeyPoint() ? 1 : 0,
                tag_id: point.tagId(),
                tag_name: point.tagName()
              });
            });
            gd.answers.push(dkanswer);
          });
          break;
        case 10:
          gd.answers = [];
          invalidArray = [];
          ko.utils.arrayForEach(this.answers(), function(answer, index) {
            var dkanswer;
            if (answer.content() === '') {
              invalidArray.push(index + 1);
            }
            dkanswer = {
              answer: answer.content().charCodeAt() - 65,
              score_percentage: answer.score(),
              knowledge_points: []
            };
            ko.utils.arrayForEach(answer.points(), function(point) {
              return dkanswer.knowledge_points.push({
                id: point.id(),
                name: point.content(),
                main: point.isKeyPoint() ? 1 : 0,
                tag_id: point.tagId(),
                tag_name: point.tagName()
              });
            });
            gd.answers.push(dkanswer);
          });
          if (invalidArray.length > 0) {
            alert('第 ' + invalidArray.join(',') + ' 空未填写答案！');
            return false;
          }
      }
      if (that.different()) {
        gd.analysis_list = [];
        ko.utils.arrayForEach(that.keychain(), function(data) {
          var choice;
          choice = [];
          ko.utils.arrayForEach(data.choice(), function(c) {
            choice.push(c.id());
          });
          gd.analysis_list.push({
            analysis_type_id: data.key,
            choice_ids: choice,
            text: data.content()
          });
        });
      }
      return gd;
    };

    BigDady.prototype.ComplexDisposal = function(gd) {
      var c, j, len, listen_change, ref, ref1, ref2, that;
      console.info(gd);
      that = this;
      this.description(gd.description);
      this.id(gd._id);
      this.nid(gd.nid);
      this.subject_id(gd.subject_id);
      this.description(gd.description);
      this.content(gd.content.content);
      this.content_type_id(0);
      this.content_type_name("复合题");
      this.second_content_type_id(gd.content_type_id);
      this.second_content_type_name(gd.content_type);
      this.third_content_type_id(gd.content_type_2_id);
      this.third_content_type_name(gd.content_type_2);
      this.content_type_choices(gd.content_type_choices);
      that.different = ko.observable(((ref = gd.analysis_types) != null ? ref.length : void 0) > 0);
      if (that.different()) {
        that.__analysis_types = gd.analysis_types;
        that.__analysis_type_ids = ko.observableArray([]);
        ko.utils.arrayForEach(that.content_type_choices(), function(choice1) {
          if (choice1.id === that.second_content_type_id()) {
            that.__analysis_type_ids(choice1.analysis_type_ids);
            ko.utils.arrayForEach(choice1.children, function(choice2) {
              if (choice2.id === that.third_content_type_id()) {
                that.__analysis_type_ids(choice2.analysis_type_ids);
              }
            });
          }
        });
        that.keychain = ko.observableArray([]);
        if (((ref1 = gd.content.sub_contents[0].analysis_list) != null ? ref1.length : void 0) > 0) {
          ko.utils.arrayForEach(gd.content.sub_contents[0].analysis_list, function(analysis) {
            var choice, multi, type;
            type = 1;
            multi = 1;
            ko.utils.arrayForEach(that.__analysis_types, function(node) {
              if (node._id === analysis.analysis_type_id) {
                type = node.content_type;
              }
              if (node._id === analysis.analysis_type_id) {
                multi = node.multi;
              }
            });
            choice = [];
            ko.utils.arrayForEach(analysis.choice_ids, function(c, index) {
              choice.push({
                id: ko.observable(c),
                text: ko.observable(analysis.choice_contents[index])
              });
            });
            that.keychain.push({
              key: analysis.analysis_type_id,
              name: analysis.analysis_type,
              multi: multi,
              choice: ko.observableArray(choice),
              type: type,
              content: ko.observable(analysis.text)
            });
          });
        } else {
          ko.utils.arrayForEach(that.__analysis_types, function(analysis) {
            if (that.__analysis_type_ids.indexOf(analysis._id) !== -1) {
              that.keychain.push({
                key: analysis._id,
                name: analysis.name,
                multi: analysis.multi,
                choice: ko.observableArray([]),
                type: analysis.content_type,
                content: ko.observable('')
              });
            }
          });
        }
        that.__analysis_type_ids.subscribe(function() {
          that.keychain.removeAll();
          ko.utils.arrayForEach(that.__analysis_types, function(analysis) {
            var choice;
            choice = [];
            ko.utils.arrayForEach(analysis.choices, function(c, index) {
              choice.push({
                id: ko.observable(c),
                text: ko.observable(analysis.choice_contents[index])
              });
            });
            if (that.__analysis_type_ids.indexOf(analysis._id) !== -1) {
              that.keychain.push({
                key: analysis._id,
                name: analysis.name,
                multi: analysis.multi,
                choice: ko.observableArray(choice),
                type: analysis.content_type,
                content: ko.observable('')
              });
            }
          });
        });
      }
      ref2 = gd.content_type_choices;
      for (j = 0, len = ref2.length; j < len; j++) {
        c = ref2[j];
        this.second_content_type_list().push([c.id, c.name]);
      }
      this.update_third_content_type_list();
      ko.utils.arrayForEach(gd.papers, function(paper) {
        if (paper.number === '') {
          that._search_paper_id(paper.paper_id);
          return that._search_paper_name(paper.title);
        } else {
          return that.papers.push(new Paper({
            id: paper.paper_id,
            content: paper.title,
            number: paper.number
          }));
        }
      });
      if (this._search_paper_id() !== '') {
        this.search_paper_numbers();
      }
      this.difficulty_id(gd.difficulty_int);
      this.difficulty_name(gd.difficulty);
      this.difficulty_list(gd.difficulty_list);
      if (gd.question_type != null) {
        this.question_type(gd.question_type);
      }
      this.seconds(gd.seconds || 0);
      this.has_listen(gd.has_listen === 1);
      if (gd.listen_url !== '') {
        this.resources.push(new Resource({
          name: gd.listen_name,
          url: gd.listen_url
        }));
      }
      ko.utils.arrayForEach(gd.knowledge_points, function(knowledge) {
        that.points.push(new Point({
          id: knowledge.id,
          content: knowledge.name,
          isKeyPoint: knowledge.main === 1,
          tagId: knowledge.tag_id,
          tagName: knowledge.tag_name
        }));
      });
      listen_change = function() {
        var choice1, choice2, k, l, len1, len2, ref3, ref4;
        if (that.different()) {
          that.__analysis_type_ids([]);
        }
        ref3 = gd.content_type_choices;
        for (k = 0, len1 = ref3.length; k < len1; k++) {
          choice1 = ref3[k];
          if (choice1.id === that.second_content_type_id()) {
            if (that.different()) {
              that.__analysis_type_ids(choice1.analysis_type_ids);
            }
            ref4 = choice1.children;
            for (l = 0, len2 = ref4.length; l < len2; l++) {
              choice2 = ref4[l];
              if (choice2.id === that.third_content_type_id()) {
                if (that.different()) {
                  that.__analysis_type_ids(choice2.analysis_type_ids);
                }
                if (choice2.has_listen === 1) {
                  that.has_listen(true);
                } else {
                  that.has_listen(false);
                  that.resources.removeAll();
                }
              }
            }
          }
          $('script[name="analysis_types_editor_code"]').each(function() {
            return $tools.initEditor($(this).context.id, that.keychain()[$(this).attr("data-chain-id")], 'content');
          });
        }
      };
      this.second_content_type_id.subscribe(listen_change);
      this.third_content_type_id.subscribe(listen_change);
      this.analysis(gd.content.analysis);
      this.sub_complex_id = ko.observable(-1);
      this.sub_complex_type = ko.observable(gd.sub_content_type_choices);
      that.initWorkbook(gd.workbooks);
    };

    BigDady.prototype.ComplexRecycling = function(gd) {
      var that;
      that = this;
      gd.description = this.description();
      gd.content_type_id = +this.second_content_type_id();
      gd.content_type = this.second_content_type_name();
      gd.content_type_2_id = +this.third_content_type_id();
      gd.content_type_2 = this.third_content_type_name();
      gd.content.content = this.content();
      gd.papers = [];
      ko.utils.arrayForEach(this.papers(), function(paper) {
        gd.papers.push({
          paper_id: paper.id(),
          title: paper.content(),
          number: +paper.number()
        });
      });
      gd.difficulty_int = +this.difficulty_id();
      gd.difficulty = this.difficulty_name();
      if (gd.question_type != null) {
        gd.question_type = this.question_type();
      }
      gd.seconds = +this.seconds();
      gd.listen_name = this.resources()[0] != null ? this.resources()[0].name() : '';
      gd.listen_url = this.resources()[0] != null ? this.resources()[0].url() : '';
      gd.knowledge_points = [];
      ko.utils.arrayForEach(this.points(), function(point) {
        gd.knowledge_points.push({
          id: point.id(),
          name: point.content(),
          main: point.isKeyPoint() ? 1 : 0,
          tag_id: point.tagId(),
          tag_name: point.tagName()
        });
      });
      if (that.different()) {
        gd.analysis_list = [];
        ko.utils.arrayForEach(that.keychain(), function(data) {
          var choice;
          choice = [];
          ko.utils.arrayForEach(data.choice(), function(c) {
            choice.push(c.id());
          });
          gd.analysis_list.push({
            analysis_type_id: data.key,
            choice_ids: choice,
            text: data.content()
          });
        });
      }
      return gd;
    };

    BigDady.prototype.GarbageDisposal = function(gd) {
      var c, j, len, listen_change, ref, ref1, ref2, that;
      console.info(gd);
      that = this;
      this.nid(gd.nid);
      this.id(gd._id);
      this.subject_id(gd.subject_id);
      this.description(gd.description);
      this.content(gd.content.sub_contents[0].content);
      this.content_type_id(gd.content.sub_contents[0].sub_content_type_id);
      this.content_type_name(gd.content.sub_contents[0].sub_content_type);
      this.second_content_type_id(gd.content_type_id);
      this.second_content_type_name(gd.content_type);
      this.third_content_type_id(gd.content_type_2_id);
      this.third_content_type_name(gd.content_type_2);
      this.content_type_choices(gd.content_type_choices);
      that.different = ko.observable(((ref = gd.analysis_types) != null ? ref.length : void 0) > 0);
      if (that.different()) {
        that.__analysis_types = gd.analysis_types;
        that.__analysis_type_ids = ko.observableArray([]);
        ko.utils.arrayForEach(that.content_type_choices(), function(choice1) {
          if (choice1.id === that.second_content_type_id()) {
            that.__analysis_type_ids(choice1.analysis_type_ids);
            ko.utils.arrayForEach(choice1.children, function(choice2) {
              if (choice2.id === that.third_content_type_id()) {
                that.__analysis_type_ids(choice2.analysis_type_ids);
              }
            });
          }
        });
        that.keychain = ko.observableArray([]);
        if (((ref1 = gd.content.sub_contents[0].analysis_list) != null ? ref1.length : void 0) > 0) {
          ko.utils.arrayForEach(gd.content.sub_contents[0].analysis_list, function(analysis) {
            var choice, multi, type;
            type = 1;
            multi = 1;
            ko.utils.arrayForEach(that.__analysis_types, function(node) {
              if (node._id === analysis.analysis_type_id) {
                type = node.content_type;
              }
              if (node._id === analysis.analysis_type_id) {
                multi = node.multi;
              }
            });
            choice = [];
            ko.utils.arrayForEach(analysis.choice_ids, function(c, index) {
              choice.push({
                id: ko.observable(c),
                text: ko.observable(analysis.choice_contents[index])
              });
            });
            that.keychain.push({
              key: analysis.analysis_type_id,
              name: analysis.analysis_type,
              multi: multi,
              choice: ko.observableArray(choice),
              type: type,
              content: ko.observable(analysis.text)
            });
          });
        } else {
          ko.utils.arrayForEach(that.__analysis_types, function(analysis) {
            if (that.__analysis_type_ids.indexOf(analysis._id) !== -1) {
              that.keychain.push({
                key: analysis._id,
                name: analysis.name,
                multi: analysis.multi,
                choice: ko.observableArray([]),
                type: analysis.content_type,
                content: ko.observable('')
              });
            }
          });
        }
        that.__analysis_type_ids.subscribe(function() {
          that.keychain.removeAll();
          ko.utils.arrayForEach(that.__analysis_types, function(analysis) {
            var choice;
            choice = [];
            ko.utils.arrayForEach(analysis.choices, function(c, index) {
              choice.push({
                id: ko.observable(c),
                text: ko.observable(analysis.choice_contents[index])
              });
            });
            if (that.__analysis_type_ids.indexOf(analysis._id) !== -1) {
              that.keychain.push({
                key: analysis._id,
                name: analysis.name,
                multi: analysis.multi,
                choice: ko.observableArray(choice),
                type: analysis.content_type,
                content: ko.observable('')
              });
            }
          });
        });
      }
      ref2 = gd.content_type_choices;
      for (j = 0, len = ref2.length; j < len; j++) {
        c = ref2[j];
        this.second_content_type_list().push([c.id, c.name]);
      }
      this.update_third_content_type_list();
      ko.utils.arrayForEach(gd.papers, function(paper) {
        if (paper.number === '') {
          that._search_paper_id(paper.paper_id);
          that._search_paper_name(paper.title);
        } else {
          that.papers.push(new Paper({
            id: paper.paper_id,
            content: paper.title,
            number: paper.number
          }));
        }
      });
      if (this._search_paper_id() !== '') {
        this.search_paper_numbers();
      }
      that.initWorkbook(gd.workbooks);
      this.difficulty_id(gd.difficulty_int);
      this.difficulty_name(gd.difficulty);
      this.difficulty_list(gd.difficulty_list);
      if (gd.question_type != null) {
        this.question_type(gd.question_type);
      }
      this.seconds(gd.seconds || 0);
      this.has_listen(gd.has_listen === 1);
      if (gd.content.sub_contents[0].listen_url !== '') {
        this.resources.push(new Resource({
          name: gd.content.sub_contents[0].listen_name,
          url: gd.content.sub_contents[0].listen_url
        }));
      }
      this.hide_option_number(gd.content.sub_contents[0].hide_option_number === 1);
      ko.utils.arrayForEach(gd.knowledge_points, function(knowledge) {
        that.points.push(new Point({
          id: knowledge.id,
          content: knowledge.name,
          isKeyPoint: knowledge.main === 1,
          tagId: knowledge.tag_id,
          tagName: knowledge.tag_name
        }));
      });
      this.analysis(gd.content.sub_contents[0].analysis);
      this.answer_is_radio = ko.observable([1, 5, 11].indexOf(this.content_type_id()) !== -1);
      $("body").off("update_model").on("update_model", function(event, content, key) {
        if (/^CO/.test(key)) {
          that.content(content);
        }
        if (/^AN/.test(key)) {
          that.analysis(content);
        }
      });
      func[this.content_type_id()].call(this, gd);
      this._answer_list.subscribe(function() {
        that.answers([]);
        ko.utils.arrayForEach(that.options(), function(option) {
          if ($.inArray(option.id(), that._answer_list()) !== -1) {
            that.answers.push(new Answer({
              id: option.id(),
              content: option.content()
            }));
          }
        });
        $("body").trigger("answers_update");
      });
      $("body").on("answers_update", function() {
        ko.utils.arrayForEach(that.options(), function(option) {
          return ko.utils.arrayForEach(that.answers(), function(answer) {
            switch (that.content_type_id()) {
              case 1:
              case 2:
              case 3:
              case 5:
              case 11:
                if (answer.id() === option.id()) {
                  answer.points.removeAll();
                  ko.utils.arrayForEach(option.points(), function(point) {
                    answer.points.push(new Point({
                      id: point.id(),
                      content: point.content(),
                      isKeyPoint: point.isKeyPoint(),
                      tagId: point.tagId(),
                      tagName: point.tagName()
                    }));
                  });
                  answer.score(option.score());
                }
            }
          });
        });
      });
      listen_change = function() {
        var choice1, choice2, k, l, len1, len2, ref3, ref4;
        if (that.different()) {
          that.__analysis_type_ids([]);
        }
        ref3 = gd.content_type_choices;
        for (k = 0, len1 = ref3.length; k < len1; k++) {
          choice1 = ref3[k];
          if (choice1.id === that.second_content_type_id()) {
            if (that.different()) {
              that.__analysis_type_ids(choice1.analysis_type_ids);
            }
            ref4 = choice1.children;
            for (l = 0, len2 = ref4.length; l < len2; l++) {
              choice2 = ref4[l];
              if (choice2.id === that.third_content_type_id()) {
                if (that.different()) {
                  that.__analysis_type_ids(choice2.analysis_type_ids);
                }
                if (choice2.has_listen === 1) {
                  that.has_listen(true);
                } else {
                  that.has_listen(false);
                  that.resources.removeAll();
                }
              }
            }
          }
          $('script[name="analysis_types_editor_code"]').each(function() {
            return $tools.initEditor($(this).context.id, that.keychain()[$(this).attr("data-chain-id")], 'content');
          });
        }
      };
      this.second_content_type_id.subscribe(function(newValue) {
        ko.utils.arrayForEach(that.second_content_type_list(), function(type) {
          if (newValue === type[0]) {
            that.second_content_type_name(type[1]);
          }
        });
        listen_change();
      });
      this.third_content_type_id.subscribe(function(newValue) {
        ko.utils.arrayForEach(that.third_content_type_list(), function(type) {
          if (newValue === type[0]) {
            that.third_content_type_name(type[1]);
          }
        });
        listen_change();
      });
    };

    BigDady.prototype.Recycling = function(gd) {
      var error_str, j, len, option, position_error_option, recyclingResult, ref, that;
      that = this;
      gd.description = this.description();
      gd.content.sub_contents[0].content = this.content();
      gd.content.sub_contents[0].sub_content_type_id = +this.content_type_id();
      gd.content.sub_contents[0].sub_content_type = this.content_type_name();
      gd.content_type_id = +this.second_content_type_id();
      gd.content_type = this.second_content_type_name();
      gd.content_type_2_id = +this.third_content_type_id();
      gd.content_type_2 = this.third_content_type_name();
      gd.papers = [];
      ko.utils.arrayForEach(this.papers(), function(paper) {
        gd.papers.push({
          paper_id: paper.id(),
          title: paper.content(),
          number: +paper.number()
        });
      });
      gd.difficulty_int = +this.difficulty_id();
      gd.difficulty = this.difficulty_name();
      if (gd.question_type != null) {
        gd.question_type = this.question_type();
      }
      gd.seconds = +this.seconds();
      gd.content.sub_contents[0].listen_name = this.resources()[0] != null ? this.resources()[0].name() : '';
      gd.content.sub_contents[0].listen_url = this.resources()[0] != null ? this.resources()[0].url() : '';
      gd.content.sub_contents[0].hide_option_number = this.hide_option_number() ? 1 : 0;
      gd.content.sub_contents[0].options = [];
      gd.content.sub_contents[0].answers = [];
      if ((ref = that.content_type_id()) === 11 || ref === 12) {
        gd.content.sub_contents[0].oral_dict.options = [];
      }
      position_error_option = [];
      ko.utils.arrayForEach(this.options(), function(option, index) {
        var pos_col, pos_index, voice_texts;
        if (that.content_type_id() === 7) {
          if (option.position_col() === '' || option.position_index() === '') {
            position_error_option.push(option.id());
            return;
          }
          pos_col = option.position_col() - 1;
          pos_index = option.position_index() - 1;
          if (gd.content.sub_contents[0].options[pos_col] == null) {
            gd.content.sub_contents[0].options[pos_col] = {};
            gd.content.sub_contents[0].options[pos_col].option = [];
          }
          gd.content.sub_contents[0].options[pos_col].option[pos_index] = option.content();
        } else if (that.content_type_id() === 11) {
          voice_texts = [];
          ko.utils.arrayForEach(option.voice_texts(), function(voice) {
            voice_texts.push(voice.content());
          });
          gd.content.sub_contents[0].oral_dict.options.push({
            text: option.content(),
            voice_texts: [].concat(voice_texts)
          });
        } else {
          gd.content.sub_contents[0].options.push({
            option: option.content()
          });
        }
        if (that.answers()[0] != null) {
          if (that.answers()[0].id() === String.fromCharCode(+index + 65)) {
            gd.content.sub_contents[0].answers.push(index + '');
          }
        }
      });
      if (position_error_option.length > 0) {
        error_str = '';
        for (j = 0, len = position_error_option.length; j < len; j++) {
          option = position_error_option[j];
          error_str += (option + 1) + '  ';
        }
        alert('选项' + error_str + '的位置未填写！');
        return false;
      }
      if (that.content_type_id() === 7) {
        ko.utils.arrayForEach(gd.content.sub_contents[0].options, function(optcol, colnum) {
          ko.utils.arrayForEach(optcol, function(opt, inum) {
            if (opt == null) {
              alert('缺少第' + (colnum + 1) + '列 第' + (inum + 1) + '个选项！');
              return false;
            }
            return true;
          });
        });
      }
      gd.knowledge_points = [];
      ko.utils.arrayForEach(this.points(), function(point) {
        gd.knowledge_points.push({
          id: point.id(),
          name: point.content(),
          main: point.isKeyPoint() ? 1 : 0,
          tag_id: point.tagId(),
          tag_name: point.tagName()
        });
      });
      gd.content.sub_contents[0].analysis = this.analysis();
      recyclingResult = back[this.content_type_id()].call(this, gd);
      if (recyclingResult === false) {
        return false;
      }
      if (that.different()) {
        gd.content.sub_contents[0].analysis_list = [];
        ko.utils.arrayForEach(that.keychain(), function(data) {
          var choice;
          choice = [];
          ko.utils.arrayForEach(data.choice(), function(c) {
            choice.push(c.id());
          });
          gd.content.sub_contents[0].analysis_list.push({
            analysis_type_id: data.key,
            choice_ids: choice,
            text: data.content()
          });
        });
      }
      return gd;
    };

    BigDady.prototype.getWorkbookData = function() {
      var j, len, ref, result, temp_part_index, that, w;
      that = this;
      result = [];
      ref = that.workbook_contents();
      for (j = 0, len = ref.length; j < len; j++) {
        w = ref[j];
        temp_part_index = w.part_index === void 0 ? null : w.part_index;
        result.push({
          workbook_catalog_id: w.id,
          part_index: temp_part_index,
          number: w.number,
          number_voice_text: w.number_voice_text
        });
      }
      return result;
    };

    BigDady.prototype.formatWorkbookDetail = function(item, detail, index) {
      var a, j, len, name, temp_arr;
      temp_arr = Array(index);
      if (index >= 1) {
        detail += '<br>';
      }
      for (j = 0, len = temp_arr.length; j < len; j++) {
        a = temp_arr[j];
        detail += '----';
      }
      name = item.name ? item.name : item.title;
      detail += name;
      if (item.child === null) {
        return detail;
      } else {
        return arguments.callee(item.child, detail, ++index);
      }
    };

    BigDady.prototype.initWorkbook = function(workbooks) {
      var that;
      if (workbooks == null) {
        workbooks = [];
      }
      that = this;
      return ko.utils.arrayForEach(workbooks, function(w) {
        $.post('/workbook/service-get-workbook-parents', {
          workbook_catalog_id: w.workbook_catalog_id
        }).success(function(data) {
          var detail;
          detail = that.formatWorkbookDetail(data.data, '', 0);
          that.workbook_contents.push({
            id: w.workbook_catalog_id,
            name: w.workbook_catalog_id,
            number: w.part_number,
            is_part: w.is_part || false,
            part_index: w.part_index,
            detail: detail,
            number_voice_text: w.part_number_voice_text
          });
          return $('.popinfo').popover({
            trigger: 'hover',
            html: true
          });
        });
      });
    };

    return BigDady;

  })();

  func = [
    function() {}, function(gd) {
      var that;
      that = this;
      ko.utils.arrayForEach(gd.content.sub_contents[0].options, function(options_content, index) {
        that.options.push(new Option({
          id: String.fromCharCode(+index + 65),
          content: options_content.option
        }));
      });
      ko.utils.arrayForEach(gd.content.sub_contents[0].answers, function(dkanswer) {
        var answer;
        answer = new Answer({
          id: String.fromCharCode(+dkanswer.answer + 65),
          content: that.options()[+dkanswer.answer] ? that.options()[+dkanswer.answer].content() : '',
          score: dkanswer.score_percentage
        });
        that.options()[+dkanswer.answer].score(dkanswer.score_percentage);
        ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
          answer.points.push(new Point({
            id: knowledge.id,
            content: knowledge.name,
            isKeyPoint: knowledge.main === 1,
            tagId: knowledge.tag_id,
            tagName: knowledge.tag_name
          }));
          that.options()[+dkanswer.answer].points.push(new Point({
            id: knowledge.id,
            content: knowledge.name,
            isKeyPoint: knowledge.main === 1,
            tagId: knowledge.tag_id,
            tagName: knowledge.tag_name
          }));
        });
        that.answers.push(answer);
        return that._answer_list(String.fromCharCode(+dkanswer.answer + 65));
      });
    }, function(gd) {
      var that;
      that = this;
      ko.utils.arrayForEach(gd.content.sub_contents[0].options, function(options_content, index) {
        that.options.push(new Option({
          id: String.fromCharCode(+index + 65),
          content: options_content.option
        }));
      });
      ko.utils.arrayForEach(gd.content.sub_contents[0].answers, function(dkanswer) {
        var answer;
        answer = new Answer({
          id: String.fromCharCode(+dkanswer.answer + 65),
          content: that.options()[+dkanswer.answer] ? that.options()[+dkanswer.answer].content() : '',
          score: dkanswer.score_percentage
        });
        that.options()[+dkanswer.answer].score(dkanswer.score_percentage);
        ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
          answer.points.push(new Point({
            id: knowledge.id,
            content: knowledge.name,
            isKeyPoint: knowledge.main === 1,
            tagId: knowledge.tag_id,
            tagName: knowledge.tag_name
          }));
          that.options()[+dkanswer.answer].points.push(new Point({
            id: knowledge.id,
            content: knowledge.name,
            isKeyPoint: knowledge.main === 1,
            tagId: knowledge.tag_id,
            tagName: knowledge.tag_name
          }));
        });
        that.answers.push(answer);
        return that._answer_list.push(String.fromCharCode(+dkanswer.answer + 65));
      });
    }, function(gd) {
      var that;
      that = this;
      ko.utils.arrayForEach(gd.content.sub_contents[0].options, function(options_content, index) {
        that.options.push(new Option({
          id: String.fromCharCode(+index + 65),
          content: options_content.option
        }));
      });
      ko.utils.arrayForEach(gd.content.sub_contents[0].answers, function(dkanswer) {
        var answer;
        answer = new Answer({
          id: String.fromCharCode(+dkanswer.answer + 65),
          content: that.options()[+dkanswer.answer] ? that.options()[+dkanswer.answer].content() : '',
          score: dkanswer.score_percentage
        });
        that.options()[+dkanswer.answer].score(dkanswer.score_percentage);
        ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
          answer.points.push(new Point({
            id: knowledge.id,
            content: knowledge.name,
            isKeyPoint: knowledge.main === 1,
            tagId: knowledge.tag_id,
            tagName: knowledge.tag_name
          }));
          that.options()[+dkanswer.answer].points.push(new Point({
            id: knowledge.id,
            content: knowledge.name,
            isKeyPoint: knowledge.main === 1,
            tagId: knowledge.tag_id,
            tagName: knowledge.tag_name
          }));
        });
        that.answers.push(answer);
        return that._answer_list.push(String.fromCharCode(+dkanswer.answer + 65));
      });
    }, function(gd) {
      var parseContent, that;
      that = this;
      parseContent = function() {
        return setTimeout(function() {
          var content, count, newCont, preview;
          count = 0;
          preview = $('.content_preview');
          content = preview.html();
          newCont = content.replace(/__\$\$__|\\fbox {}/g, function(str) {
            if (str === '__$$__') {
              return '<span style="padding:0 20px;border-bottom:1px solid #000;white-space: nowrap;">空' + (++count) + '</span>';
            }
            if (str.indexOf('\fbox {}')) {
              return '\\fbox {空' + (++count) + '}';
            }
          });
          preview.html(newCont);
          return preview.find('img[latex]').each(function(index, element) {
            var latex;
            latex = $(element).attr('latex');
            return $.ajax({
              url: 'https://tiku.17zuoye.net/latex/render?r=p&ds=140&m=y&s=' + encodeURIComponent(latex),
              dataType: "jsonp",
              jsonp: "cb",
              success: function(data) {
                return $(element).attr('src', data.url);
              }
            });
          });
        }, 100);
      };
      this.content.beforeSubscribe(function(newValue, oldValue) {
        var answer, i, j, newBlockCount, newCount, oldBlockCount, oldCount, ref;
        parseContent();
        oldBlockCount = oldValue.split("\\fbox {}").length - 1;
        newBlockCount = newValue.split("\\fbox {}").length - 1;
        oldCount = oldValue.split("__$$__").length - 1 + oldBlockCount;
        newCount = newValue.split("__$$__").length - 1 + newBlockCount;
        if (newCount !== oldCount) {
          that.answers.removeAll();
          for (i = j = 0, ref = newCount; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            answer = new Answer({
              id: i
            });
            that.answers.push(answer);
            $tools.initEditor(answer._editor_code, that, "answers()[" + i + "].content");
          }
          TreeDialogMod.bindInput($('.answer_nlgs .treeDialog'));
        }
      });
      ko.utils.arrayForEach(gd.content.sub_contents[0].answers, function(dkanswer) {
        var answer;
        answer = new Answer({
          content: dkanswer.answer,
          score: dkanswer.score_percentage,
          editor_type: dkanswer.rich_text
        });
        ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
          answer.points.push(new Point({
            id: knowledge.id,
            content: knowledge.name,
            isKeyPoint: knowledge.main === 1,
            tagId: knowledge.tag_id,
            tagName: knowledge.tag_name
          }));
        });
        return that.answers.push(answer);
      });
      parseContent();
    }, function(gd) {
      var that;
      that = this;
      ko.utils.arrayForEach(gd.content.sub_contents[0].options, function(options_content, index) {
        that.options.push(new Option({
          id: String.fromCharCode(+index + 65),
          content: options_content.option
        }));
      });
      ko.utils.arrayForEach(gd.content.sub_contents[0].answers, function(dkanswer) {
        var answer;
        answer = new Answer({
          id: String.fromCharCode(+dkanswer.answer + 65),
          content: that.options()[+dkanswer.answer] ? that.options()[+dkanswer.answer].content() : '',
          score: dkanswer.score_percentage
        });
        that.options()[+dkanswer.answer].score(dkanswer.score_percentage);
        ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
          answer.points.push(new Point({
            id: knowledge.id,
            content: knowledge.name,
            isKeyPoint: knowledge.main === 1,
            tagId: knowledge.tag_id,
            tagName: knowledge.tag_name
          }));
          that.options()[+dkanswer.answer].points.push(new Point({
            id: knowledge.id,
            content: knowledge.name,
            isKeyPoint: knowledge.main === 1,
            tagId: knowledge.tag_id,
            tagName: knowledge.tag_name
          }));
        });
        that.answers.push(answer);
        return that._answer_list(String.fromCharCode(+dkanswer.answer + 65));
      });
    }, function(gd) {
      var that;
      that = this;
      if (gd.content.sub_contents[0].answers.length === 0) {
        this.answers.push(new Answer({
          id: 0
        }));
      } else {
        ko.utils.arrayForEach(gd.content.sub_contents[0].answers, function(dkanswer, index) {
          var answer;
          answer = new Answer({
            id: index,
            content: dkanswer.answer,
            score: dkanswer.score_percentage
          });
          ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
            answer.points.push(new Point({
              id: knowledge.id,
              content: knowledge.name,
              isKeyPoint: knowledge.main === 1,
              tagId: knowledge.tag_id,
              tagName: knowledge.tag_name
            }));
          });
          that.answers.push(answer);
        });
      }
    }, function(gd) {
      var option_id, that;
      that = this;
      option_id = 0;
      ko.utils.arrayForEach((gd.content.sub_contents[0].options.length > 0 ? gd.content.sub_contents[0].options : []), function(option, index) {
        var i, j, len, o, option_obj, ref;
        ref = option.option;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          o = ref[i];
          option_obj = {
            id: option_id++,
            content: o,
            position_col: index + 1,
            position_index: i + 1
          };
          that.options.push(new Option(option_obj));
        }
      });
      if (gd.content.sub_contents[0].answers.length === 0) {
        this.answers.push(new Answer({
          id: 0
        }));
      } else {
        ko.utils.arrayForEach(gd.content.sub_contents[0].answers, function(dkanswer, index) {
          var answer;
          answer = new Answer({
            id: index,
            content: dkanswer.answer,
            score: dkanswer.score_percentage
          });
          ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
            answer.points.push(new Point({
              id: knowledge.id,
              content: knowledge.name,
              isKeyPoint: knowledge.main === 1,
              tagId: knowledge.tag_id,
              tagName: knowledge.tag_name
            }));
          });
          that.answers.push(answer);
        });
      }
    }, function(gd) {
      var that;
      that = this;
      ko.utils.arrayForEach((gd.content.sub_contents[0].options.length > 0 ? gd.content.sub_contents[0].options : []), function(option, index) {
        var option_obj;
        option_obj = {
          id: index,
          content: option.option
        };
        that.options.push(new Option(option_obj));
      });
      if (gd.content.sub_contents[0].answers.length === 0) {
        this.answers.push(new Answer({
          id: 0
        }));
      } else {
        ko.utils.arrayForEach(gd.content.sub_contents[0].answers, function(dkanswer, index) {
          var answer;
          answer = new Answer({
            id: index,
            content: dkanswer.answer,
            classify_name: dkanswer.classification,
            score: dkanswer.score_percentage
          });
          ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
            answer.points.push(new Point({
              id: knowledge.id,
              content: knowledge.name,
              isKeyPoint: knowledge.main === 1,
              tagId: knowledge.tag_id,
              tagName: knowledge.tag_name
            }));
          });
          that.answers.push(answer);
        });
      }
    }, function(gd) {
      var that;
      that = this;
      ko.utils.arrayForEach((gd.content.sub_contents[0].options.length > 0 ? gd.content.sub_contents[0].options : []), function(option, index) {
        var option_obj;
        option_obj = {
          id: index,
          content: option.option
        };
        that.options.push(new Option(option_obj));
      });
      if (gd.content.sub_contents[0].answers.length === 0) {
        this.answers.push(new Answer({
          id: 0
        }));
      } else {
        ko.utils.arrayForEach(gd.content.sub_contents[0].answers, function(dkanswer, index) {
          var answer;
          answer = new Answer({
            id: index,
            content: dkanswer.answer,
            score: dkanswer.score_percentage
          });
          ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
            answer.points.push(new Point({
              id: knowledge.id,
              content: knowledge.name,
              isKeyPoint: knowledge.main === 1,
              tagId: knowledge.tag_id,
              tagName: knowledge.tag_name
            }));
          });
          that.answers.push(answer);
        });
      }
    }, function(gd) {
      var parseContent, that;
      that = this;
      ko.utils.arrayForEach(gd.content.sub_contents[0].options, function(options_content, index) {
        that.options.push(new Option({
          id: String.fromCharCode(+index + 65),
          content: options_content.option
        }));
      });
      parseContent = function() {
        return setTimeout(function() {
          var content, count, newCont, preview;
          count = 0;
          preview = $('.content_preview');
          content = preview.html();
          newCont = content.replace(/__\$\$__/g, function() {
            return '<span style="padding:0 20px;border-bottom:1px solid #000;white-space: nowrap;">空' + (++count) + '</span>';
          });
          preview.html(newCont);
          return preview.find('img[latex]').each(function(index, element) {
            var latex, newLatex;
            latex = $(element).attr('latex');
            newLatex = latex.replace(/\\fbox {}/g, function() {
              return '\\fbox {空' + (++count) + '}';
            });
            return $.ajax({
              url: 'https://tiku.17zuoye.net/latex/render?r=p&ds=140&m=y&s=' + encodeURIComponent(newLatex),
              dataType: "jsonp",
              jsonp: "cb",
              success: function(data) {
                return $(element).attr('src', data.url);
              }
            });
          });
        }, 100);
      };
      this.content.beforeSubscribe(function(newValue, oldValue) {
        var answer, i, j, newBlockCount, newCount, oldBlockCount, oldCount, ref;
        parseContent();
        oldBlockCount = oldValue.split("\\fbox {}").length - 1;
        newBlockCount = newValue.split("\\fbox {}").length - 1;
        oldCount = oldValue.split("__$$__").length - 1 + oldBlockCount;
        newCount = newValue.split("__$$__").length - 1 + newBlockCount;
        if (newCount !== oldCount) {
          that.answers.removeAll();
          for (i = j = 0, ref = newCount; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            answer = new Answer({
              id: i
            });
            that.answers.push(answer);
          }
          TreeDialogMod.bindInput($('.answer_nlgs .treeDialog'));
        }
      });
      ko.utils.arrayForEach(gd.content.sub_contents[0].answers, function(dkanswer) {
        var answer;
        answer = new Answer({
          content: String.fromCharCode(+dkanswer.answer + 65),
          score: dkanswer.score_percentage
        });
        ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
          answer.points.push(new Point({
            id: knowledge.id,
            content: knowledge.name,
            isKeyPoint: knowledge.main === 1,
            tagId: knowledge.tag_id,
            tagName: knowledge.tag_name
          }));
        });
        return that.answers.push(answer);
      });
    }, function(gd) {
      var ref, that;
      that = this;
      ko.utils.arrayForEach((((ref = gd.content.sub_contents[0].oral_dict.options) != null ? ref.length : void 0) > 0 ? gd.content.sub_contents[0].oral_dict.options : []), function(option, index) {
        that.options.push(new Option({
          id: String.fromCharCode(+index + 65),
          content: option.text,
          voice_texts: option.voice_texts
        }));
      });
      ko.utils.arrayForEach(gd.content.sub_contents[0].answers, function(dkanswer) {
        var answer;
        answer = new Answer({
          id: String.fromCharCode(+dkanswer.answer + 65),
          content: that.options()[+dkanswer.answer] ? that.options()[+dkanswer.answer].content() : '',
          score: dkanswer.score_percentage
        });
        that.options()[+dkanswer.answer].score(dkanswer.score_percentage);
        ko.utils.arrayForEach(dkanswer.knowledge_points, function(knowledge) {
          answer.points.push(new Point({
            id: knowledge.id,
            content: knowledge.name,
            isKeyPoint: knowledge.main === 1,
            tagId: knowledge.tag_id,
            tagName: knowledge.tag_name
          }));
          that.options()[+dkanswer.answer].points.push(new Point({
            id: knowledge.id,
            content: knowledge.name,
            isKeyPoint: knowledge.main === 1,
            tagId: knowledge.tag_id,
            tagName: knowledge.tag_name
          }));
        });
        that.answers.push(answer);
        return that._answer_list(String.fromCharCode(+dkanswer.answer + 65));
      });
      this.seconds = ko.observable(gd.content.sub_contents[0].oral_dict.seconds || 0);
      this.pic_url = ko.observable(gd.content.sub_contents[0].oral_dict.pic_url || '');
      this.pic_name = ko.observable(gd.content.sub_contents[0].oral_dict.pic_name || '');
    }, function(gd) {
      var that;
      that = this;
      this.voice_text = ko.observable(gd.content.sub_contents[0].oral_dict.voice_text || '');
      this.seconds = ko.observable(gd.content.sub_contents[0].oral_dict.seconds || 0);
      this.pic_url = ko.observable(gd.content.sub_contents[0].oral_dict.pic_url || '');
      this.pic_name = ko.observable(gd.content.sub_contents[0].oral_dict.pic_name || '');
    }, function(gd) {
      var ref, that;
      that = this;
      ko.utils.arrayForEach((((ref = gd.content.sub_contents[0].oral_dict.options) != null ? ref.length : void 0) > 0 ? gd.content.sub_contents[0].oral_dict.options : []), function(role, index) {
        that.roles.push(new Role({
          id: index,
          name: role.name,
          content: role.text,
          voice_texts: role.voice_texts,
          seconds: role.seconds,
          role_type: role.role_type,
          resource: new Resource({
            name: role.listen_name,
            url: role.listen_url
          })
        }));
      });
      this.seconds = ko.observable(gd.content.sub_contents[0].oral_dict.seconds || 0);
      this.pic_url = ko.observable(gd.content.sub_contents[0].oral_dict.pic_url || '');
      this.pic_name = ko.observable(gd.content.sub_contents[0].oral_dict.pic_name || '');
    }, function(gd) {
      var ref, that;
      that = this;
      ko.utils.arrayForEach((((ref = gd.content.sub_contents[0].oral_dict.options) != null ? ref.length : void 0) > 0 ? gd.content.sub_contents[0].oral_dict.options : []), function(option, index) {
        that.roles.push(new Role({
          id: index,
          content: option.text,
          voice_text: option.voice_text,
          seconds: option.seconds,
          resource: new Resource({
            name: option.listen_name,
            url: option.listen_url
          })
        }));
      });
      this.seconds = ko.observable(gd.content.sub_contents[0].oral_dict.seconds || 0);
      this.pic_url = ko.observable(gd.content.sub_contents[0].oral_dict.pic_url || '');
      this.pic_name = ko.observable(gd.content.sub_contents[0].oral_dict.pic_name || '');
    }, function(gd) {
      var that;
      that = this;
      this.variables = ko.observableArray([]);
      ko.utils.arrayForEach(gd.content.sub_contents[0].oral_dict.variables || [], function(variable) {
        that.variables.push(new Variable(variable));
      });
      this.sentence_patterns = ko.observableArray([]);
      ko.utils.arrayForEach(gd.content.sub_contents[0].oral_dict.sentence_patterns || [], function(sentence_pattern) {
        that.sentence_patterns.push(new SentencePattern(sentence_pattern));
      });
      this.keywords = ko.observableArray([]);
      ko.utils.arrayForEach(gd.content.sub_contents[0].oral_dict.keywords || [], function(keyword) {
        that.keywords.push(new Keyword(keyword));
      });
      this.seconds = ko.observable(gd.content.sub_contents[0].oral_dict.seconds || 0);
      this.pic_url = ko.observable(gd.content.sub_contents[0].oral_dict.pic_url || '');
      this.pic_name = ko.observable(gd.content.sub_contents[0].oral_dict.pic_name || '');
    }
  ];

  back = [
    function(gd) {}, function(gd) {
      gd.content.sub_contents[0].answers = [];
      ko.utils.arrayForEach(this.answers(), function(answer) {
        var dkanswer;
        dkanswer = {
          answer: answer.id().charCodeAt() - 65,
          score_percentage: answer.score(),
          knowledge_points: []
        };
        ko.utils.arrayForEach(answer.points(), function(point) {
          return dkanswer.knowledge_points.push({
            id: point.id(),
            name: point.content(),
            main: point.isKeyPoint() ? 1 : 0,
            tag_id: point.tagId(),
            tag_name: point.tagName()
          });
        });
        gd.content.sub_contents[0].answers.push(dkanswer);
      });
    }, function(gd) {
      gd.content.sub_contents[0].answers = [];
      ko.utils.arrayForEach(this.answers(), function(answer) {
        var dkanswer;
        dkanswer = {
          answer: answer.id().charCodeAt() - 65,
          score_percentage: answer.score(),
          knowledge_points: []
        };
        ko.utils.arrayForEach(answer.points(), function(point) {
          return dkanswer.knowledge_points.push({
            id: point.id(),
            name: point.content(),
            main: point.isKeyPoint() ? 1 : 0,
            tag_id: point.tagId(),
            tag_name: point.tagName()
          });
        });
        gd.content.sub_contents[0].answers.push(dkanswer);
      });
    }, function(gd) {
      gd.content.sub_contents[0].answers = [];
      ko.utils.arrayForEach(this.answers(), function(answer) {
        var dkanswer;
        dkanswer = {
          answer: answer.id().charCodeAt() - 65,
          score_percentage: answer.score(),
          knowledge_points: []
        };
        ko.utils.arrayForEach(answer.points(), function(point) {
          return dkanswer.knowledge_points.push({
            id: point.id(),
            name: point.content(),
            main: point.isKeyPoint() ? 1 : 0,
            tag_id: point.tagId(),
            tag_name: point.tagName()
          });
        });
        return gd.content.sub_contents[0].answers.push(dkanswer);
      });
    }, function(gd) {
      gd.content.sub_contents[0].answers = [];
      ko.utils.arrayForEach(this.answers(), function(answer) {
        var dkanswer;
        dkanswer = {
          answer: answer.content(),
          score_percentage: answer.score(),
          rich_text: answer.editor_type(),
          knowledge_points: []
        };
        ko.utils.arrayForEach(answer.points(), function(point) {
          return dkanswer.knowledge_points.push({
            id: point.id(),
            name: point.content(),
            main: point.isKeyPoint() ? 1 : 0,
            tag_id: point.tagId(),
            tag_name: point.tagName()
          });
        });
        gd.content.sub_contents[0].answers.push(dkanswer);
      });
    }, function(gd) {
      gd.content.sub_contents[0].answers = [];
      ko.utils.arrayForEach(this.answers(), function(answer) {
        var dkanswer;
        dkanswer = {
          answer: answer.id().charCodeAt() - 65,
          score_percentage: answer.score(),
          knowledge_points: []
        };
        ko.utils.arrayForEach(answer.points(), function(point) {
          return dkanswer.knowledge_points.push({
            id: point.id(),
            name: point.content(),
            main: point.isKeyPoint() ? 1 : 0,
            tag_id: point.tagId(),
            tag_name: point.tagName()
          });
        });
        gd.content.sub_contents[0].answers.push(dkanswer);
      });
    }, function(gd) {
      gd.content.sub_contents[0].answers = [];
      ko.utils.arrayForEach(this.answers(), function(answer) {
        var dkanswer;
        dkanswer = {
          answer: answer.content(),
          score_percentage: answer.score(),
          knowledge_points: []
        };
        ko.utils.arrayForEach(answer.points(), function(point) {
          return dkanswer.knowledge_points.push({
            id: point.id(),
            name: point.content(),
            main: point.isKeyPoint() ? 1 : 0,
            tag_id: point.tagId(),
            tag_name: point.tagName()
          });
        });
        gd.content.sub_contents[0].answers.push(dkanswer);
      });
    }, function(gd) {
      gd.content.sub_contents[0].answers = [];
      ko.utils.arrayForEach(this.answers(), function(answer) {
        var dkanswer;
        dkanswer = {
          answer: answer.content().replace(/，/g, ','),
          score_percentage: answer.score(),
          knowledge_points: []
        };
        ko.utils.arrayForEach(answer.points(), function(point) {
          return dkanswer.knowledge_points.push({
            id: point.id(),
            name: point.content(),
            main: point.isKeyPoint() ? 1 : 0,
            tag_id: point.tagId(),
            tag_name: point.tagName()
          });
        });
        gd.content.sub_contents[0].answers.push(dkanswer);
      });
    }, function(gd) {
      gd.content.sub_contents[0].answers = [];
      ko.utils.arrayForEach(this.answers(), function(answer) {
        var dkanswer;
        dkanswer = {
          answer: answer.content().replace(/，/g, ','),
          score_percentage: answer.score(),
          classification: answer.classify_name(),
          knowledge_points: []
        };
        ko.utils.arrayForEach(answer.points(), function(point) {
          return dkanswer.knowledge_points.push({
            id: point.id(),
            name: point.content(),
            main: point.isKeyPoint() ? 1 : 0,
            tag_id: point.tagId(),
            tag_name: point.tagName()
          });
        });
        gd.content.sub_contents[0].answers.push(dkanswer);
      });
    }, function(gd) {
      gd.content.sub_contents[0].answers = [];
      ko.utils.arrayForEach(this.answers(), function(answer) {
        var dkanswer;
        dkanswer = {
          answer: answer.content().replace(/，/g, ','),
          score_percentage: answer.score(),
          knowledge_points: []
        };
        ko.utils.arrayForEach(answer.points(), function(point) {
          return dkanswer.knowledge_points.push({
            id: point.id(),
            name: point.content(),
            main: point.isKeyPoint() ? 1 : 0,
            tag_id: point.tagId(),
            tag_name: point.tagName()
          });
        });
        gd.content.sub_contents[0].answers.push(dkanswer);
      });
    }, function(gd) {
      var invalidArray;
      gd.content.sub_contents[0].answers = [];
      invalidArray = [];
      ko.utils.arrayForEach(this.answers(), function(answer, index) {
        var dkanswer;
        if (answer.content() === '') {
          invalidArray.push(index + 1);
        }
        dkanswer = {
          answer: answer.content().charCodeAt() - 65,
          score_percentage: answer.score(),
          knowledge_points: []
        };
        ko.utils.arrayForEach(answer.points(), function(point) {
          return dkanswer.knowledge_points.push({
            id: point.id(),
            name: point.content(),
            main: point.isKeyPoint() ? 1 : 0,
            tag_id: point.tagId(),
            tag_name: point.tagName()
          });
        });
        gd.content.sub_contents[0].answers.push(dkanswer);
      });
      if (invalidArray.length > 0) {
        alert('第 ' + invalidArray.join(',') + ' 空未填写答案！');
        return false;
      }
    }, function(gd) {
      gd.content.sub_contents[0].answers = [];
      ko.utils.arrayForEach(this.answers(), function(answer) {
        var dkanswer;
        dkanswer = {
          answer: answer.id().charCodeAt() - 65,
          score_percentage: answer.score(),
          knowledge_points: []
        };
        ko.utils.arrayForEach(answer.points(), function(point) {
          return dkanswer.knowledge_points.push({
            id: point.id(),
            name: point.content(),
            main: point.isKeyPoint() ? 1 : 0,
            tag_id: point.tagId(),
            tag_name: point.tagName()
          });
        });
        gd.content.sub_contents[0].answers.push(dkanswer);
      });
      gd.content.sub_contents[0].oral_dict.seconds = this.seconds();
      gd.content.sub_contents[0].oral_dict.pic_url = this.pic_url();
      gd.content.sub_contents[0].oral_dict.pic_name = this.pic_name();
    }, function(gd) {
      gd.content.sub_contents[0].oral_dict.voice_text = this.voice_text();
      gd.content.sub_contents[0].oral_dict.seconds = this.seconds();
      gd.content.sub_contents[0].oral_dict.pic_url = this.pic_url();
      gd.content.sub_contents[0].oral_dict.pic_name = this.pic_name();
    }, function(gd) {
      gd.content.sub_contents[0].oral_dict.options = [];
      ko.utils.arrayForEach(this.roles(), function(role) {
        var voice_texts;
        voice_texts = [];
        ko.utils.arrayForEach(role.voice_texts(), function(voice) {
          voice_texts.push(voice.content());
        });
        gd.content.sub_contents[0].oral_dict.options.push({
          name: role.name(),
          text: role.content(),
          voice_texts: voice_texts,
          seconds: +role.seconds(),
          role_type: +role.role_type(),
          listen_name: role.resource.name(),
          listen_url: role.resource.url()
        });
      });
      gd.content.sub_contents[0].oral_dict.seconds = this.seconds();
      gd.content.sub_contents[0].oral_dict.pic_url = this.pic_url();
      gd.content.sub_contents[0].oral_dict.pic_name = this.pic_name();
    }, function(gd) {
      gd.content.sub_contents[0].oral_dict.options = [];
      ko.utils.arrayForEach(this.roles(), function(role) {
        gd.content.sub_contents[0].oral_dict.options.push({
          name: role.name(),
          text: role.content(),
          voice_text: role.voice_text(),
          seconds: +role.seconds(),
          listen_name: role.resource.name(),
          listen_url: role.resource.url()
        });
      });
      gd.content.sub_contents[0].oral_dict.seconds = this.seconds();
      gd.content.sub_contents[0].oral_dict.pic_url = this.pic_url();
      gd.content.sub_contents[0].oral_dict.pic_name = this.pic_name();
    }, function(gd) {
      var that;
      that = this;
      gd.content.sub_contents[0].oral_dict.variables = [];
      ko.utils.arrayForEach(this.variables(), function(variable) {
        if (variable.content() !== '') {
          gd.content.sub_contents[0].oral_dict.variables.push(variable.content());
        }
      });
      gd.content.sub_contents[0].oral_dict.sentence_patterns = [];
      ko.utils.arrayForEach(this.sentence_patterns(), function(sentence_pattern) {
        if (sentence_pattern.content() !== '') {
          gd.content.sub_contents[0].oral_dict.sentence_patterns.push(sentence_pattern.content());
        }
      });
      gd.content.sub_contents[0].oral_dict.keywords = [];
      ko.utils.arrayForEach(this.keywords(), function(keyword) {
        if (keyword.content() !== '') {
          gd.content.sub_contents[0].oral_dict.keywords.push(keyword.content());
        }
      });
      gd.content.sub_contents[0].oral_dict.seconds = this.seconds();
      gd.content.sub_contents[0].oral_dict.pic_url = this.pic_url();
      gd.content.sub_contents[0].oral_dict.pic_name = this.pic_name();
    }
  ];

  this.BigDady = BigDady;

}).call(this);

//# sourceMappingURL=BigDady.js.map
